
import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { FileText, Download, Calendar, BarChart3, TrendingUp, AlertCircle } from 'lucide-react';
import { trpc } from '@/utils/trpc';
import type { MonthlyReport, MonthlyReportInput } from '../../../server/src/schema';

export function ReportsManager() {
  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());
  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);
  const [reportData, setReportData] = useState<MonthlyReport | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const months = [
    { value: 1, label: 'January' },
    { value: 2, label: 'February' },
    { value: 3, label: 'March' },
    { value: 4, label: 'April' },
    { value: 5, label: 'May' },
    { value: 6, label: 'June' },
    { value: 7, label: 'July' },
    { value: 8, label: 'August' },
    { value: 9, label: 'September' },
    { value: 10, label: 'October' },
    { value: 11, label: 'November' },
    { value: 12, label: 'December' }
  ];

  const currentYear = new Date().getFullYear();
  const years = Array.from({ length: 11 }, (_, i) => currentYear - 5 + i);

  const generateReport = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const input: MonthlyReportInput = {
        year: selectedYear,
        month: selectedMonth
      };
      
      const report = await trpc.getMonthlyReport.query(input);
      setReportData(report);
    } catch (err) {
      console.error('Failed to generate report:', err);
      setError('Failed to generate report. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const downloadReport = () => {
    if (!reportData) return;

    const reportContent = `
School Inventory Monthly Report
Generated: ${new Date().toLocaleString()}
Report Period: ${months.find(m => m.value === selectedMonth)?.label} ${selectedYear}

=== SUMMARY ===
Total Items: ${reportData.total_items}
Items Added: ${reportData.items_added}
Items Updated: ${reportData.items_updated}

=== CATEGORY BREAKDOWN ===
${reportData.category_breakdown.map(cat => 
  `${cat.category.toUpperCase()}: ${cat.total_count} items
  - Good: ${cat.good_count}
  - Damaged: ${cat.damaged_count}
  - Needs Repair: ${cat.needs_repair_count}`
).join('\n')}

=== CONDITION BREAKDOWN ===
Good: ${reportData.condition_breakdown.good}
Damaged: ${reportData.condition_breakdown.damaged}
Needs Repair: ${reportData.condition_breakdown.needs_repair}

Report generated by School Inventory Management System
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `inventory-report-${selectedYear}-${selectedMonth.toString().padStart(2, '0')}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h2 className="text-2xl font-bold text-gray-900">ðŸ“ˆ Reports & Analytics</h2>
        <p className="text-gray-600">Generate detailed reports on your inventory status</p>
      </div>

      {/* Report Generation */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="h-5 w-5" />
            Monthly Inventory Report
          </CardTitle>
          <CardDescription>
            Generate a comprehensive report for a specific month and year
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div className="space-y-2">
              <Label htmlFor="year">Year</Label>
              <Select
                value={selectedYear.toString()}
                onValueChange={(value: string) => setSelectedYear(parseInt(value))}
              >
                <SelectTrigger id="year">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {years.map((year) => (
                    <SelectItem key={year} value={year.toString()}>
                      {year}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="month">Month</Label>
              <Select
                value={selectedMonth.toString()}
                onValueChange={(value: string) => setSelectedMonth(parseInt(value))}
              >
                <SelectTrigger id="month">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {months.map((month) => (
                    <SelectItem key={month.value} value={month.value.toString()}>
                      {month.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <Label>&nbsp;</Label>
              <Button onClick={generateReport} disabled={isLoading} className="w-full gap-2">
                <FileText className="h-4 w-4" />
                {isLoading ? 'Generating...' : 'Generate Report'}
              </Button>
            </div>
          </div>

          {error && (
            <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
              <div className="flex items-center gap-2 text-red-800">
                <AlertCircle className="h-4 w-4" />
                <span>{error}</span>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Report Results */}
      {reportData && (
        <div className="space-y-6">
          {/* Report Header */}
          <Card className="bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
            <CardHeader>
              <div className="flex justify-between items-start">
                <div>
                  <CardTitle className="text-xl text-green-800">
                    ðŸ“Š Monthly Report - {months.find(m => m.value === selectedMonth)?.label} {selectedYear}
                  </CardTitle>
                  <CardDescription className="text-green-700">
                    Generated on {reportData.report_date.toLocaleDateString()}
                  </CardDescription>
                </div>
                <Button onClick={downloadReport} variant="outline" className="gap-2">
                  <Download className="h-4 w-4" />
                  Download
                </Button>
              </div>
            </CardHeader>
          </Card>

          {/* Key Metrics */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg flex items-center gap-2">
                  <BarChart3 className="h-5 w-5 text-blue-600" />
                  Total Items
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-blue-600">{reportData.total_items}</div>
                <p className="text-sm text-gray-600">Assets in inventory</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg flex items-center gap-2">
                  <TrendingUp className="h-5 w-5 text-green-600" />
                  Items Added
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-green-600">{reportData.items_added}</div>
                <p className="text-sm text-gray-600">New additions this month</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg flex items-center gap-2">
                  <FileText className="h-5 w-5 text-purple-600" />
                  Items Updated
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-600">{reportData.items_updated}</div>
                <p className="text-sm text-gray-600">Modified this month</p>
              </CardContent>
            </Card>
          </div>

          {/* Category Breakdown */}
          <Card>
            <CardHeader>
              <CardTitle>ðŸ“¦ Category Breakdown</CardTitle>
              <CardDescription>
                Inventory distribution by category
              </CardDescription>
            </CardHeader>
            <CardContent>
              {reportData.category_breakdown.length === 0 ? (
                <p className="text-gray-500 text-center py-4">No category data available</p>
              ) : (
                <div className="rounded-md border overflow-hidden">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Category</TableHead>
                        <TableHead>Total Items</TableHead>
                        <TableHead>Good</TableHead>
                        <TableHead>Damaged</TableHead>
                        <TableHead>Needs Repair</TableHead>
                        <TableHead>Health Score</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {reportData.category_breakdown.map((category) => {
                        const healthScore = category.total_count > 0 
                          ? Math.round((category.good_count / category.total_count) * 100)
                          : 0;
                        
                        return (
                          <TableRow key={category.category}>
                            <TableCell className="font-medium capitalize">
                              {category.category === 'electronic' && 'ðŸ“±'} 
                              {category.category === 'pc' && 'ðŸ’»'} 
                              {category.category === 'furniture' && 'ðŸª‘'} 
                              {category.category}
                            </TableCell>
                            <TableCell>
                              <Badge variant="secondary">{category.total_count}</Badge>
                            </TableCell>
                            <TableCell>
                              <span className="text-green-600 font-medium">{category.good_count}</span>
                            </TableCell>
                            <TableCell>
                              <span className="text-yellow-600 font-medium">{category.damaged_count}</span>
                            </TableCell>
                            <TableCell>
                              <span className="text-red-600 font-medium">{category.needs_repair_count}</span>
                            </TableCell>
                            <TableCell>
                              <Badge 
                                variant={healthScore >= 80 ? 'default' : healthScore >= 60 ? 'secondary' : 'destructive'}
                              >
                                {healthScore}%
                              </Badge>
                            </TableCell>
                          </TableRow>
                        );
                      })}
                    </TableBody>
                  </Table>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Condition Summary */}
          <Card>
            <CardHeader>
              <CardTitle>ðŸ”§ Overall Condition Summary</CardTitle>
              <CardDescription>
                Health status of all inventory items
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="text-center p-6 bg-green-50 rounded-lg border border-green-200">
                  <div className="text-3xl font-bold text-green-600 mb-2">
                    {reportData.condition_breakdown.good}
                  </div>
                  <div className="text-green-800 font-medium">Good Condition</div>
                  <div className="text-sm text-green-600 mt-1">Ready for use</div>
                </div>
                
                <div className="text-center p-6 bg-yellow-50 rounded-lg border border-yellow-200">
                  <div className="text-3xl font-bold text-yellow-600 mb-2">
                    {reportData.condition_breakdown.damaged}
                  </div>
                  <div className="text-yellow-800 font-medium">Damaged</div>
                  <div className="text-sm text-yellow-600 mt-1">Needs attention</div>
                </div>
                
                <div className="text-center p-6 bg-red-50 rounded-lg border border-red-200">
                  <div className="text-3xl font-bold text-red-600 mb-2">
                    {reportData.condition_breakdown.needs_repair}
                  </div>
                  <div className="text-red-800 font-medium">Needs Repair</div>
                  <div className="text-sm text-red-600 mt-1">Requires fixing</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Report Features Info */}
      <Card className="bg-blue-50 border-blue-200">
        <CardHeader>
          <CardTitle className="text-blue-900">ðŸ“‹ Available Reports</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-semibold text-blue-800 mb-2">Monthly Reports Include:</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>â€¢ Total inventory count</li>
                <li>â€¢ Items added during the month</li>
                <li>â€¢ Items updated during the month</li>
                <li>â€¢ Category-wise breakdown</li>
                <li>â€¢ Condition analysis</li>
                <li>â€¢ Health score by category</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold text-blue-800 mb-2">Export Options:</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>â€¢ Plain text format (.txt)</li>
                <li>â€¢ Detailed breakdown included</li>
                <li>â€¢ Ready for administrative review</li>
                <li>â€¢ Timestamped reports</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
